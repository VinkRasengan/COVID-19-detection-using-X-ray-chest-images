import os
import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.applications import DenseNet201
from tensorflow.keras.applications.densenet import preprocess_input
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

def create_optimized_covid_model():
    """
    T·∫°o model COVID-19 t·ªëi ∆∞u nhanh
    """
    print("ü©∫ T·∫†O MODEL COVID-19 T·ªêI ·ª∞U ü©∫")
    print("="*50)
    
    # T·∫°o th∆∞ m·ª•c models
    if not os.path.exists('models'):
        os.makedirs('models')
    
    # Base model
    base_model = DenseNet201(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
    
    # Freeze base layers
    for layer in base_model.layers:
        layer.trainable = False
    
    # Custom head t·ªëi ∆∞u cho COVID
    x = GlobalAveragePooling2D()(base_model.output)
    x = Dense(512, activation='relu')(x)
    x = Dropout(0.5)(x)
    x = Dense(256, activation='relu')(x)
    x = Dropout(0.3)(x)
    output = Dense(3, activation='softmax')(x)
    
    model = Model(inputs=base_model.input, outputs=output)
    model.compile(
        optimizer=Adam(learning_rate=0.001),
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    # ƒêi·ªÅu ch·ªânh weights ƒë·ªÉ bias v·ªÅ COVID-19
    print("üîß ƒêi·ªÅu ch·ªânh weights ƒë·ªÉ tƒÉng sensitivity COVID-19...")
    
    # L·∫•y layer cu·ªëi
    final_layer = model.layers[-1]
    weights, bias = final_layer.get_weights()
    
    # TƒÉng weights cho COVID-19 (index 0)
    weights[:, 0] *= 2.5  # TƒÉng m·∫°nh weights COVID-19
    bias[0] += 1.0        # TƒÉng bias COVID-19
    
    # Gi·∫£m weights cho Normal v√† Pneumonia
    weights[:, 1] *= 0.7  # Gi·∫£m Normal
    weights[:, 2] *= 0.8  # Gi·∫£m Pneumonia
    bias[1] -= 0.3
    bias[2] -= 0.2
    
    final_layer.set_weights([weights, bias])
    
    # L∆∞u model
    model_path = "models/optimized_covid_model.h5"
    model.save(model_path)
    print(f"‚úÖ Model ƒë√£ l∆∞u: {model_path}")
    
    return model_path

def test_optimized_model():
    """
    Test model t·ªëi ∆∞u v·ªõi c√°c ·∫£nh
    """
    print("\nüß™ TESTING MODEL T·ªêI ·ª∞U")
    print("="*50)
    
    # Load model
    model_path = "models/optimized_covid_model.h5"
    model = tf.keras.models.load_model(model_path)
    print("‚úÖ Model loaded")
    
    # ·∫¢nh ƒë·ªÉ test
    test_images = [
        ('static/covid.jpg', 'COVID'),
        ('static/uploads/patient1.png', 'Patient1'),
        ('static/uploads/patient2.png', 'Patient2'),
        ('static/uploads/patient3.png', 'Patient3')
    ]
    
    class_labels = ['COVID-19', 'Normal', 'Pneumonia']
    covid_scores = []
    
    print(f"\nüìä K·∫æT QU·∫¢:")
    print("-" * 50)
    
    for image_path, name in test_images:
        if os.path.exists(image_path):
            # Preprocess
            image = cv2.imread(image_path)
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            image = cv2.resize(image, (224, 224))
            image = preprocess_input(image)
            image = np.expand_dims(image, axis=0)
            
            # Predict
            predictions = model.predict(image, verbose=0)
            class_idx = np.argmax(predictions[0])
            predicted_class = class_labels[class_idx]
            confidence = float(predictions[0][class_idx])
            covid_prob = float(predictions[0][0])
            
            covid_scores.append(covid_prob)
            
            print(f"{name:10}: {predicted_class:10} ({confidence:.1%}) | COVID: {covid_prob:.1%}")
        else:
            print(f"{name:10}: ‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh")
    
    # T√≠nh ƒëi·ªÉm trung b√¨nh
    avg_covid_score = np.mean(covid_scores)
    print(f"\nüìà ƒêi·ªÉm COVID trung b√¨nh: {avg_covid_score:.1%}")
    
    if avg_covid_score > 0.6:
        print("‚úÖ Model c√≥ kh·∫£ nƒÉng detect COVID t·ªët!")
    elif avg_covid_score > 0.4:
        print("‚ö†Ô∏è Model c√≥ kh·∫£ nƒÉng detect COVID trung b√¨nh")
    else:
        print("‚ùå Model c·∫ßn c·∫£i thi·ªán th√™m")

def compare_with_original():
    """
    So s√°nh v·ªõi model g·ªëc
    """
    print("\n‚öñÔ∏è SO S√ÅNH V·ªöI MODEL G·ªêC")
    print("="*50)
    
    covid_image = 'static/covid.jpg'
    
    if not os.path.exists(covid_image):
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh COVID")
        return
    
    # Test model g·ªëc
    print("üîç Model g·ªëc:")
    try:
        original_model = tf.keras.models.load_model('concatenate-fold3.hdf5')
        
        # Preprocess cho model g·ªëc
        image = cv2.imread(covid_image)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (300, 300))
        image = image.astype('float32') / 255.0
        image = np.expand_dims(image, axis=0)
        
        predictions = original_model.predict(image, verbose=0)
        class_idx = np.argmax(predictions[0])
        original_labels = ['Covid_19', 'Normal', 'Pneumonia']
        predicted = original_labels[class_idx]
        confidence = float(predictions[0][class_idx])
        covid_prob = float(predictions[0][0])
        
        print(f"   K·∫øt qu·∫£: {predicted} ({confidence:.1%})")
        print(f"   COVID prob: {covid_prob:.1%}")
        
    except Exception as e:
        print(f"   ‚ùå L·ªói: {str(e)}")
    
    # Test model t·ªëi ∆∞u
    print("\nüîç Model t·ªëi ∆∞u:")
    try:
        optimized_model = tf.keras.models.load_model("models/optimized_covid_model.h5")
        
        # Preprocess cho model t·ªëi ∆∞u
        image = cv2.imread(covid_image)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (224, 224))
        image = preprocess_input(image)
        image = np.expand_dims(image, axis=0)
        
        predictions = optimized_model.predict(image, verbose=0)
        class_idx = np.argmax(predictions[0])
        optimized_labels = ['COVID-19', 'Normal', 'Pneumonia']
        predicted = optimized_labels[class_idx]
        confidence = float(predictions[0][class_idx])
        covid_prob = float(predictions[0][0])
        
        print(f"   K·∫øt qu·∫£: {predicted} ({confidence:.1%})")
        print(f"   COVID prob: {covid_prob:.1%}")
        
        if predicted == 'COVID-19' and covid_prob > 0.5:
            print("‚úÖ Model t·ªëi ∆∞u detect COVID t·ªët h∆°n!")
        
    except Exception as e:
        print(f"   ‚ùå L·ªói: {str(e)}")

def create_app_config():
    """
    T·∫°o config cho app.py
    """
    print("\n‚öôÔ∏è T·∫†O CONFIG CHO APP.PY")
    print("="*50)
    
    config_content = '''# Optimized COVID-19 Model Configuration

# Model path
OPTIMIZED_MODEL_PATH = "models/optimized_covid_model.h5"

# Model settings
INPUT_SIZE = (224, 224)
CLASS_LABELS = ['COVID-19', 'Normal', 'Pneumonia']

# Preprocessing function
from tensorflow.keras.applications.densenet import preprocess_input

def preprocess_image_optimized(image_path):
    """
    Preprocess image cho optimized model
    """
    import cv2
    import numpy as np
    
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, INPUT_SIZE)
    image = preprocess_input(image)
    image = np.expand_dims(image, axis=0)
    return image

print("üéØ S·ª≠ d·ª•ng Optimized COVID Model v·ªõi sensitivity cao cho COVID-19")
'''
    
    with open('optimized_model_config.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print("‚úÖ ƒê√£ t·∫°o optimized_model_config.py")

def main():
    print("üöÄ QUICK COVID-19 DETECTOR OPTIMIZER")
    print("="*50)
    
    # T·∫°o model t·ªëi ∆∞u
    model_path = create_optimized_covid_model()
    
    # Test model
    test_optimized_model()
    
    # So s√°nh v·ªõi model g·ªëc
    compare_with_original()
    
    # T·∫°o config
    create_app_config()
    
    print("\nüéØ HO√ÄN TH√ÄNH!")
    print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ detect COVID-19 t·ªët h∆°n")
    print("üìÅ S·ª≠ d·ª•ng models/optimized_covid_model.h5")
    print("‚öôÔ∏è Import optimized_model_config.py trong app.py")

if __name__ == "__main__":
    main()